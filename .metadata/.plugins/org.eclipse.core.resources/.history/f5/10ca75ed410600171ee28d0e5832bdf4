package tetrisNewton;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;



public class Board extends JPanel implements ActionListener,KeyListener {
	
	
	
	
	
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private static Shape chora;// = new Shapes();
	private static Shapes abcdef; 
	int speed = 30;
	Graphics g;
	
	/*public Board(){
		setBackground(Color.white);
		setLayout(new BorderLayout());
		
	
	}*/
	
	
	public static void main(String[] args) {
		JFrame window = new JFrame("Tetris Game");
        Board content = new Board();
        content.setBackground(Color.white);
        window.setContentPane(content);
        window.setSize(800  , 500); 
        window.setResizable(false); 
       // Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        /*window.setLocation( (screenSize.width - window.getWidth())/2,
                (screenSize.height - window.getHeight())/2 );*/
        window.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        Timer frameTime = new Timer(1000,content);
		window.setVisible(true);
		frameTime.start();
        //window.setVisible(true);
	}
	
	

	@Override
	public void keyPressed(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyReleased(KeyEvent evt) {
		// TODO Auto-generated method stub
		int code = evt.getKeyCode();
		/*if(code == 87 || code == KeyEvent.VK_UP){
			
			if(abcdef.down == false){
				abcdef.up = true;
				System.out.println(" moving up");
				abcdef.down = abcdef.left = abcdef.right = false;
			}
			    
		}
		else if(code == 83|| code == KeyEvent.VK_DOWN){
			if(abcdef.up == false){
				abcdef.down = true;
				System.out.println("moving down");
				abcdef.up = abcdef.left = abcdef.right = false;
			}
			
		}*/
		if(code == 68|| code == KeyEvent.VK_RIGHT){
			if(abcdef.left == false){
				abcdef.right = true;
				chora.xPoint = chora.xPoint+10;
				chora.draw(g, 1);
				abcdef.moveRight();
				//System.out.println("moving right");
				abcdef.left = false;
			}
		}
		else if(code == 65|| code == KeyEvent.VK_LEFT){
			if(abcdef.right == false){
				abcdef.left = true;
				chora.xPoint = chora.xPoint-10;
				chora.draw(g, 1);
				abcdef.moveLeft();
				//System.out.println("moving left");
				abcdef.right = false;
			}
			
		}	
		
	}

	@Override
	public void keyTyped(KeyEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	private int frameNum = 0;
	@Override
	public void actionPerformed(ActionEvent arg0) {
		// TODO Auto-generated method stub
		
		frameNum++;
		repaint();
	}
	
	public void drawFrame(Graphics g,int frameNumber,int width, int height){
		//for (int z=0;z<19;z++){
		
		//if(abcdef.down == true){
			
			
		//}
		/*while(abcdef.left==true)
		{
			
			chora.draw(g, 1);
		}
		while(abcdef.right=true){
			chora.xPoint = chora.xPoint+10;
		}*/
		
		//for (int e=0;e<19;e++)
			
		
	}

	protected void paintComponent(Graphics g){
		//chora.draw(g);
		super.paintComponent(g);
		g.drawLine(50, 10, 50, 450);
		g.drawLine(350, 10, 350, 450);
		g.drawLine(50, 450, 350, 450);
		//if(abcdef.down){
		//new Board();
		if (chora==null)
			chora  = new Shape(180,30);
	
		chora.yPoint = chora.yPoint+30;
			chora.draw(g, 1);
			
		/*while(abcdef.left=true)
		{
			chora.xPoint = chora.xPoint-10;
			chora.draw(g, 1);
		}
		while(abcdef.right=true){
			chora.xPoint = chora.xPoint+10;
		}*/
		drawFrame(g,frameNum,getWidth(),getHeight());//,frameNum);//getWidth(),getHeight());
		//}
		//else{
			
		//}
		
		
		
		
		
	}

}
